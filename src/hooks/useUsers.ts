import { useQuery } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\n\n// Query keys for users\nexport const userKeys = {\n  all: ['users'] as const,\n  byRole: (role: string) => [...userKeys.all, 'byRole', role] as const,\n  byId: (id: string) => [...userKeys.all, 'byId', id] as const,\n};\n\n/**\n * Hook for getting all therapists\n */\nexport function useTherapists() {\n  return useQuery({\n    queryKey: userKeys.byRole('therapist'),\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('users')\n        .select('id, name, email, role')\n        .eq('role', 'therapist')\n        .order('name');\n\n      if (error) throw error;\n      return data || [];\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\n/**\n * Hook for getting all users by role\n */\nexport function useUsersByRole(role: string) {\n  return useQuery({\n    queryKey: userKeys.byRole(role),\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('users')\n        .select('id, name, email, role')\n        .eq('role', role)\n        .order('name');\n\n      if (error) throw error;\n      return data || [];\n    },\n    enabled: !!role,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\n/**\n * Hook for getting a single user by ID\n */\nexport function useUser(userId: string | undefined) {\n  return useQuery({\n    queryKey: userKeys.byId(userId || ''),\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('users')\n        .select('*')\n        .eq('id', userId!)\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    enabled: !!userId,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\n/**\n * Hook for getting current user\n */\nexport function useCurrentUser() {\n  return useQuery({\n    queryKey: ['currentUser'],\n    queryFn: async () => {\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) return null;\n\n      const { data, error } = await supabase\n        .from('users')\n        .select('*')\n        .eq('id', user.id)\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}"