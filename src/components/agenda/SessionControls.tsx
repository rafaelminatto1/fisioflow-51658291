import React, { useState } from 'react';\nimport { Play, CheckCircle, XCircle, Calendar, Clock, AlertTriangle, FileText } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useUpdateAppointmentStatus } from '@/hooks/useAppointments';\nimport { cn } from '@/lib/utils';\nimport type { Appointment } from '@/types/agenda';\n\ninterface SessionControlsProps {\n  appointment: Appointment;\n  onStartEvolution?: (appointmentId: string, patientId: string) => void;\n}\n\nexport function SessionControls({ appointment, onStartEvolution }: SessionControlsProps) {\n  const [notes, setNotes] = useState(appointment.notes || '');\n  const [isUpdatingNotes, setIsUpdatingNotes] = useState(false);\n  \n  const updateStatusMutation = useUpdateAppointmentStatus();\n\n  const handleStatusChange = async (newStatus: Appointment['status']) => {\n    try {\n      await updateStatusMutation.mutateAsync({\n        appointmentId: appointment.id,\n        status: newStatus\n      });\n    } catch (error) {\n      console.error('Failed to update appointment status:', error);\n    }\n  };\n\n  const handleStartEvolution = () => {\n    if (onStartEvolution) {\n      onStartEvolution(appointment.id, appointment.patient_id);\n    }\n  };\n\n  const canStartEvolution = appointment.status === 'scheduled' || appointment.status === 'completed';\n  const canChangeStatus = appointment.status !== 'cancelled';\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Session Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Clock className=\"h-5 w-5\" />\n            Status da Sessão\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <Badge \n                variant={getStatusVariant(appointment.status)}\n                className=\"text-sm\"\n              >\n                {getStatusLabel(appointment.status)}\n              </Badge>\n              <span className=\"text-sm text-muted-foreground\">\n                Última atualização: {new Date(appointment.updated_at).toLocaleString('pt-BR')}\n              </span>\n            </div>\n          </div>\n\n          {canChangeStatus && (\n            <div className=\"flex flex-wrap gap-2\">\n              {appointment.status === 'scheduled' && (\n                <>\n                  <Button\n                    onClick={() => handleStatusChange('completed')}\n                    disabled={updateStatusMutation.isPending}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <CheckCircle className=\"h-4 w-4\" />\n                    Marcar como Concluída\n                  </Button>\n                  \n                  <Button\n                    variant=\"outline\"\n                    onClick={() => handleStatusChange('no_show')}\n                    disabled={updateStatusMutation.isPending}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <XCircle className=\"h-4 w-4\" />\n                    Marcar Falta\n                  </Button>\n                  \n                  <Button\n                    variant=\"destructive\"\n                    onClick={() => handleStatusChange('cancelled')}\n                    disabled={updateStatusMutation.isPending}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <XCircle className=\"h-4 w-4\" />\n                    Cancelar\n                  </Button>\n                </>\n              )}\n              \n              {appointment.status === 'completed' && (\n                <Button\n                  variant=\"outline\"\n                  onClick={() => handleStatusChange('scheduled')}\n                  disabled={updateStatusMutation.isPending}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Calendar className=\"h-4 w-4\" />\n                  Reverter para Agendado\n                </Button>\n              )}\n              \n              {appointment.status === 'no_show' && (\n                <>\n                  <Button\n                    onClick={() => handleStatusChange('completed')}\n                    disabled={updateStatusMutation.isPending}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <CheckCircle className=\"h-4 w-4\" />\n                    Marcar como Concluída\n                  </Button>\n                  \n                  <Button\n                    variant=\"outline\"\n                    onClick={() => handleStatusChange('scheduled')}\n                    disabled={updateStatusMutation.isPending}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <Calendar className=\"h-4 w-4\" />\n                    Reagendar\n                  </Button>\n                </>\n              )}\n            </div>\n          )}\n\n          {updateStatusMutation.isPending && (\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n              Atualizando status...\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Evolution Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Play className=\"h-5 w-5\" />\n            Ações da Sessão\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-3\">\n            <Button\n              onClick={handleStartEvolution}\n              disabled={!canStartEvolution}\n              className=\"w-full flex items-center gap-2\"\n              size=\"lg\"\n            >\n              <Play className=\"h-5 w-5\" />\n              Iniciar Evolução\n            </Button>\n            \n            {!canStartEvolution && (\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <AlertTriangle className=\"h-4 w-4\" />\n                <span>\n                  {appointment.status === 'cancelled' \n                    ? 'Não é possível iniciar evolução para sessão cancelada'\n                    : 'Sessão deve estar agendada ou concluída para iniciar evolução'\n                  }\n                </span>\n              </div>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n            <Button variant=\"outline\" className=\"flex items-center gap-2\">\n              <Calendar className=\"h-4 w-4\" />\n              Reagendar Sessão\n            </Button>\n            \n            <Button variant=\"outline\" className=\"flex items-center gap-2\">\n              <Clock className=\"h-4 w-4\" />\n              Alterar Horário\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Session Notes */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            Observações da Sessão\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"session-notes\">Observações</Label>\n            <Textarea\n              id=\"session-notes\"\n              value={notes}\n              onChange={(e) => setNotes(e.target.value)}\n              placeholder=\"Adicione observações sobre a sessão...\"\n              rows={4}\n            />\n          </div>\n          \n          <div className=\"flex justify-end gap-2\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setNotes(appointment.notes || '')}\n              disabled={notes === (appointment.notes || '')}\n            >\n              Cancelar\n            </Button>\n            \n            <Button\n              onClick={() => {\n                // TODO: Implement notes update\n                setIsUpdatingNotes(true);\n                setTimeout(() => setIsUpdatingNotes(false), 1000);\n              }}\n              disabled={notes === (appointment.notes || '') || isUpdatingNotes}\n            >\n              {isUpdatingNotes ? 'Salvando...' : 'Salvar Observações'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Session Timeline */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Clock className=\"h-5 w-5\" />\n            Linha do Tempo\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <SessionTimeline appointment={appointment} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Session timeline component\ninterface SessionTimelineProps {\n  appointment: Appointment;\n}\n\nfunction SessionTimeline({ appointment }: SessionTimelineProps) {\n  const events = [\n    {\n      id: 1,\n      type: 'created',\n      title: 'Agendamento criado',\n      timestamp: appointment.created_at,\n      icon: Calendar,\n      color: 'text-blue-500'\n    },\n    {\n      id: 2,\n      type: 'updated',\n      title: 'Última atualização',\n      timestamp: appointment.updated_at,\n      icon: Clock,\n      color: 'text-green-500'\n    }\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      {events.map((event, index) => {\n        const Icon = event.icon;\n        return (\n          <div key={event.id} className=\"flex items-start gap-3\">\n            <div className={cn(\n              \"flex items-center justify-center w-8 h-8 rounded-full bg-muted\",\n              event.color\n            )}>\n              <Icon className=\"h-4 w-4\" />\n            </div>\n            \n            <div className=\"flex-1 space-y-1\">\n              <p className=\"text-sm font-medium\">{event.title}</p>\n              <p className=\"text-xs text-muted-foreground\">\n                {new Date(event.timestamp).toLocaleString('pt-BR')}\n              </p>\n            </div>\n            \n            {index < events.length - 1 && (\n              <div className=\"absolute left-4 mt-8 w-px h-4 bg-border\" />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\n// Utility functions\nfunction getStatusLabel(status: string): string {\n  const labels = {\n    scheduled: 'Agendado',\n    completed: 'Concluído',\n    cancelled: 'Cancelado',\n    no_show: 'Faltou'\n  };\n  return labels[status as keyof typeof labels] || status;\n}\n\nfunction getStatusVariant(status: string): 'default' | 'secondary' | 'destructive' | 'outline' {\n  const variants = {\n    scheduled: 'default' as const,\n    completed: 'secondary' as const,\n    cancelled: 'destructive' as const,\n    no_show: 'outline' as const\n  };\n  return variants[status as keyof typeof variants] || 'outline';\n}"