import React, { useState, useEffect } from 'react';\nimport { X, Calendar, Clock, User, DollarSign, FileText, Search, AlertTriangle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { PatientSearchInput } from '@/components/patients/PatientSearchInput';\nimport { useCreateAppointment } from '@/hooks/useAppointments';\nimport { useAvailableTimeSlots, useTimeConflictCheck } from '@/hooks/useAgenda';\nimport { cn } from '@/lib/utils';\nimport type { CreateAppointmentData, PatientSearchResult } from '@/types/agenda';\n\ninterface NewAppointmentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  initialDate?: string;\n  initialTime?: string;\n  therapistId?: string;\n}\n\nexport function NewAppointmentModal({\n  isOpen,\n  onClose,\n  initialDate,\n  initialTime,\n  therapistId\n}: NewAppointmentModalProps) {\n  const [formData, setFormData] = useState<Partial<CreateAppointmentData>>({\n    date: initialDate || new Date().toISOString().split('T')[0],\n    start_time: initialTime || '09:00',\n    end_time: '',\n    session_type: 'individual',\n    notes: ''\n  });\n\n  const [selectedPatient, setSelectedPatient] = useState<PatientSearchResult | null>(null);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [step, setStep] = useState<'patient' | 'details' | 'confirmation'>('patient');\n  const [isCheckingConflicts, setIsCheckingConflicts] = useState(false);\n\n  const createAppointmentMutation = useCreateAppointment();\n  const checkTimeConflict = useTimeConflictCheck();\n  const { data: availableSlots } = useAvailableTimeSlots(\n    therapistId,\n    formData.date,\n    60 // 1 hour duration\n  );\n\n  // Calculate end time when start time changes\n  useEffect(() => {\n    if (formData.start_time) {\n      const startTime = new Date(`2000-01-01T${formData.start_time}:00`);\n      const endTime = new Date(startTime.getTime() + 60 * 60 * 1000); // Add 1 hour\n      const endTimeString = endTime.toTimeString().slice(0, 5);\n      \n      setFormData(prev => ({ ...prev, end_time: endTimeString }));\n    }\n  }, [formData.start_time]);\n\n  // Reset form when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setFormData({\n        date: initialDate || new Date().toISOString().split('T')[0],\n        start_time: initialTime || '09:00',\n        end_time: '',\n        session_type: 'individual',\n        notes: ''\n      });\n      setSelectedPatient(null);\n      setErrors({});\n      setStep('patient');\n    }\n  }, [isOpen, initialDate, initialTime]);\n\n  // Check for conflicts when time changes\n  useEffect(() => {\n    if (formData.date && formData.start_time && formData.end_time && therapistId) {\n      setIsCheckingConflicts(true);\n      \n      const checkConflicts = async () => {\n        try {\n          const hasConflict = await checkTimeConflict(\n            therapistId,\n            formData.date!,\n            formData.start_time!,\n            formData.end_time!\n          );\n          \n          if (hasConflict) {\n            setErrors(prev => ({ ...prev, time: 'Conflito de horário detectado' }));\n          } else {\n            setErrors(prev => {\n              const { time, ...rest } = prev;\n              return rest;\n            });\n          }\n        } catch (error) {\n          console.error('Error checking conflicts:', error);\n        } finally {\n          setIsCheckingConflicts(false);\n        }\n      };\n\n      const timeoutId = setTimeout(checkConflicts, 500); // Debounce\n      return () => clearTimeout(timeoutId);\n    }\n  }, [formData.date, formData.start_time, formData.end_time, therapistId, checkTimeConflict]);\n\n  const handlePatientSelect = (patient: PatientSearchResult) => {\n    setSelectedPatient(patient);\n    setStep('details');\n  };\n\n  const handleInputChange = (field: keyof CreateAppointmentData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    \n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!selectedPatient) {\n      newErrors.patient = 'Selecione um paciente';\n    }\n\n    if (!formData.date) {\n      newErrors.date = 'Data é obrigatória';\n    } else {\n      const selectedDate = new Date(formData.date);\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      if (selectedDate < today) {\n        newErrors.date = 'Data não pode ser no passado';\n      }\n    }\n\n    if (!formData.start_time) {\n      newErrors.start_time = 'Horário de início é obrigatório';\n    }\n\n    if (!formData.end_time) {\n      newErrors.end_time = 'Horário de fim é obrigatório';\n    }\n\n    if (formData.start_time && formData.end_time) {\n      const start = new Date(`2000-01-01T${formData.start_time}:00`);\n      const end = new Date(`2000-01-01T${formData.end_time}:00`);\n      \n      if (end <= start) {\n        newErrors.end_time = 'Horário de fim deve ser após o início';\n      }\n\n      const durationMinutes = (end.getTime() - start.getTime()) / (1000 * 60);\n      if (durationMinutes < 15) {\n        newErrors.end_time = 'Duração mínima de 15 minutos';\n      }\n      if (durationMinutes > 180) {\n        newErrors.end_time = 'Duração máxima de 3 horas';\n      }\n    }\n\n    if (!formData.session_type) {\n      newErrors.session_type = 'Tipo de sessão é obrigatório';\n    }\n\n    if (errors.time) {\n      newErrors.time = errors.time; // Keep existing time conflict error\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async () => {\n    if (!validateForm() || !selectedPatient || !therapistId) return;\n\n    try {\n      const appointmentData: CreateAppointmentData = {\n        patient_id: selectedPatient.id,\n        therapist_id: therapistId,\n        date: formData.date!,\n        start_time: formData.start_time!,\n        end_time: formData.end_time!,\n        session_type: formData.session_type!,\n        notes: formData.notes || ''\n      };\n\n      await createAppointmentMutation.mutateAsync(appointmentData);\n      onClose();\n    } catch (error) {\n      console.error('Failed to create appointment:', error);\n      setErrors({ submit: 'Erro ao criar agendamento. Tente novamente.' });\n    }\n  };\n\n  const handleBack = () => {\n    if (step === 'details') {\n      setStep('patient');\n    } else if (step === 'confirmation') {\n      setStep('details');\n    }\n  };\n\n  const handleNext = () => {\n    if (step === 'patient' && selectedPatient) {\n      setStep('details');\n    } else if (step === 'details' && validateForm()) {\n      setStep('confirmation');\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <Card className=\"w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n          <CardTitle className=\"text-xl font-semibold flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Novo Agendamento\n          </CardTitle>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"h-8 w-8 p-0\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {/* Progress Steps */}\n          <div className=\"flex items-center justify-center space-x-4\">\n            {['patient', 'details', 'confirmation'].map((stepName, index) => (\n              <div key={stepName} className=\"flex items-center\">\n                <div className={cn(\n                  \"w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-colors\",\n                  step === stepName ? \"bg-primary text-primary-foreground\" :\n                  ['patient', 'details', 'confirmation'].indexOf(step) > index ? \"bg-green-500 text-white\" :\n                  \"bg-muted text-muted-foreground\"\n                )}>\n                  {index + 1}\n                </div>\n                {index < 2 && (\n                  <div className={cn(\n                    \"w-12 h-0.5 mx-2 transition-colors\",\n                    ['patient', 'details', 'confirmation'].indexOf(step) > index ? \"bg-green-500\" : \"bg-muted\"\n                  )} />\n                )}\n              </div>\n            ))}\n          </div>\n\n          {/* Step Content */}\n          {step === 'patient' && (\n            <PatientSelectionStep\n              selectedPatient={selectedPatient}\n              onPatientSelect={handlePatientSelect}\n              error={errors.patient}\n            />\n          )}\n\n          {step === 'details' && (\n            <AppointmentDetailsStep\n              formData={formData}\n              onInputChange={handleInputChange}\n              errors={errors}\n              availableSlots={availableSlots}\n              selectedPatient={selectedPatient}\n              isCheckingConflicts={isCheckingConflicts}\n            />\n          )}\n\n          {step === 'confirmation' && (\n            <ConfirmationStep\n              formData={formData}\n              selectedPatient={selectedPatient}\n            />\n          )}\n\n          {/* Error Messages */}\n          {errors.submit && (\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded-md\">\n              <p className=\"text-sm text-red-700\">{errors.submit}</p>\n            </div>\n          )}\n\n          {errors.time && (\n            <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-md flex items-center gap-2\">\n              <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n              <p className=\"text-sm text-yellow-700\">{errors.time}</p>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={step === 'patient' ? onClose : handleBack}\n            >\n              {step === 'patient' ? 'Cancelar' : 'Voltar'}\n            </Button>\n\n            <div className=\"space-x-2\">\n              {step !== 'confirmation' && (\n                <Button\n                  onClick={handleNext}\n                  disabled={step === 'patient' && !selectedPatient}\n                >\n                  Próximo\n                </Button>\n              )}\n\n              {step === 'confirmation' && (\n                <Button\n                  onClick={handleSubmit}\n                  disabled={createAppointmentMutation.isPending || !!errors.time}\n                >\n                  {createAppointmentMutation.isPending ? 'Criando...' : 'Criar Agendamento'}\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Patient Selection Step\ninterface PatientSelectionStepProps {\n  selectedPatient: PatientSearchResult | null;\n  onPatientSelect: (patient: PatientSearchResult) => void;\n  error?: string;\n}\n\nfunction PatientSelectionStep({ selectedPatient, onPatientSelect, error }: PatientSelectionStepProps) {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <User className=\"h-12 w-12 text-muted-foreground mx-auto mb-2\" />\n        <h3 className=\"text-lg font-medium\">Selecionar Paciente</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          Busque e selecione o paciente para o agendamento\n        </p>\n      </div>\n\n      <PatientSearchInput\n        onPatientSelect={onPatientSelect}\n        placeholder=\"Digite o nome do paciente...\"\n      />\n\n      {selectedPatient && (\n        <div className=\"p-4 bg-green-50 border border-green-200 rounded-md\">\n          <div className=\"flex items-center gap-3\">\n            <Avatar className=\"h-12 w-12\">\n              <AvatarImage src={selectedPatient.avatar_url} alt={selectedPatient.name} />\n              <AvatarFallback>\n                {selectedPatient.name?.split(' ').map(n => n[0]).join('').toUpperCase() || 'P'}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1\">\n              <p className=\"font-medium text-green-900\">{selectedPatient.name}</p>\n              <p className=\"text-sm text-green-700\">{selectedPatient.phone}</p>\n              <p className=\"text-xs text-green-600\">\n                Valor da sessão: R$ {selectedPatient.session_price?.toFixed(2) || '0.00'}\n              </p>\n            </div>\n            <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n              Selecionado\n            </Badge>\n          </div>\n        </div>\n      )}\n\n      {error && (\n        <p className=\"text-sm text-red-600\">{error}</p>\n      )}\n    </div>\n  );\n}\n\n// Appointment Details Step\ninterface AppointmentDetailsStepProps {\n  formData: Partial<CreateAppointmentData>;\n  onInputChange: (field: keyof CreateAppointmentData, value: string) => void;\n  errors: Record<string, string>;\n  availableSlots?: string[];\n  selectedPatient: PatientSearchResult | null;\n  isCheckingConflicts: boolean;\n}\n\nfunction AppointmentDetailsStep({\n  formData,\n  onInputChange,\n  errors,\n  availableSlots,\n  selectedPatient,\n  isCheckingConflicts\n}: AppointmentDetailsStepProps) {\n  // Generate time slots from 7:00 to 19:00 with 30-minute intervals\n  const timeSlots = [];\n  for (let hour = 7; hour < 19; hour++) {\n    timeSlots.push(`${hour.toString().padStart(2, '0')}:00`);\n    timeSlots.push(`${hour.toString().padStart(2, '0')}:30`);\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <Clock className=\"h-12 w-12 text-muted-foreground mx-auto mb-2\" />\n        <h3 className=\"text-lg font-medium\">Detalhes do Agendamento</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          Configure a data, horário e tipo de sessão\n        </p>\n      </div>\n\n      {/* Selected Patient Summary */}\n      {selectedPatient && (\n        <div className=\"p-3 bg-muted rounded-lg\">\n          <div className=\"flex items-center gap-2\">\n            <User className=\"h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-sm font-medium\">{selectedPatient.name}</span>\n            <Badge variant=\"outline\">R$ {selectedPatient.session_price?.toFixed(2) || '0.00'}</Badge>\n          </div>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {/* Date */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"date\">Data</Label>\n          <Input\n            id=\"date\"\n            type=\"date\"\n            value={formData.date || ''}\n            onChange={(e) => onInputChange('date', e.target.value)}\n            min={new Date().toISOString().split('T')[0]}\n            className={errors.date ? 'border-red-500' : ''}\n          />\n          {errors.date && <p className=\"text-sm text-red-600\">{errors.date}</p>}\n        </div>\n\n        {/* Session Type */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"session_type\">Tipo de Sessão</Label>\n          <Select\n            value={formData.session_type || ''}\n            onValueChange={(value) => onInputChange('session_type', value)}\n          >\n            <SelectTrigger className={errors.session_type ? 'border-red-500' : ''}>\n              <SelectValue placeholder=\"Selecione o tipo\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"individual\">Individual</SelectItem>\n              <SelectItem value=\"group\">Grupo</SelectItem>\n            </SelectContent>\n          </Select>\n          {errors.session_type && <p className=\"text-sm text-red-600\">{errors.session_type}</p>}\n        </div>\n\n        {/* Start Time */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"start_time\">Horário de Início</Label>\n          <Select\n            value={formData.start_time || ''}\n            onValueChange={(value) => onInputChange('start_time', value)}\n          >\n            <SelectTrigger className={errors.start_time ? 'border-red-500' : ''}>\n              <SelectValue placeholder=\"Selecione o horário\" />\n            </SelectTrigger>\n            <SelectContent>\n              {timeSlots.map((time) => (\n                <SelectItem key={time} value={time}>\n                  {time}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {errors.start_time && <p className=\"text-sm text-red-600\">{errors.start_time}</p>}\n        </div>\n\n        {/* End Time */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"end_time\">Horário de Fim</Label>\n          <Select\n            value={formData.end_time || ''}\n            onValueChange={(value) => onInputChange('end_time', value)}\n          >\n            <SelectTrigger className={errors.end_time ? 'border-red-500' : ''}>\n              <SelectValue placeholder=\"Selecione o horário\" />\n            </SelectTrigger>\n            <SelectContent>\n              {timeSlots.map((time) => (\n                <SelectItem key={time} value={time}>\n                  {time}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {errors.end_time && <p className=\"text-sm text-red-600\">{errors.end_time}</p>}\n        </div>\n      </div>\n\n      {/* Duration Display */}\n      {formData.start_time && formData.end_time && (\n        <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n          <div className=\"flex items-center gap-2\">\n            <Clock className=\"h-4 w-4 text-blue-600\" />\n            <span className=\"text-sm text-blue-800\">\n              Duração: {calculateDuration(formData.start_time, formData.end_time)} minutos\n            </span>\n          </div>\n        </div>\n      )}\n\n      {/* Conflict Check Status */}\n      {isCheckingConflicts && (\n        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n          Verificando conflitos de horário...\n        </div>\n      )}\n\n      {/* Notes */}\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"notes\">Observações (opcional)</Label>\n        <Textarea\n          id=\"notes\"\n          value={formData.notes || ''}\n          onChange={(e) => onInputChange('notes', e.target.value)}\n          placeholder=\"Adicione observações sobre o agendamento...\"\n          rows={3}\n        />\n      </div>\n    </div>\n  );\n}\n\n// Confirmation Step\ninterface ConfirmationStepProps {\n  formData: Partial<CreateAppointmentData>;\n  selectedPatient: PatientSearchResult | null;\n}\n\nfunction ConfirmationStep({ formData, selectedPatient }: ConfirmationStepProps) {\n  const appointmentDate = formData.date ? new Date(formData.date) : null;\n  const formattedDate = appointmentDate?.toLocaleDateString('pt-BR', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-2\" />\n        <h3 className=\"text-lg font-medium\">Confirmar Agendamento</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          Revise as informações antes de criar o agendamento\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Resumo do Agendamento</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Patient Info */}\n          {selectedPatient && (\n            <div className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\">\n              <Avatar className=\"h-12 w-12\">\n                <AvatarImage src={selectedPatient.avatar_url} alt={selectedPatient.name} />\n                <AvatarFallback>\n                  {selectedPatient.name?.split(' ').map(n => n[0]).join('').toUpperCase() || 'P'}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <p className=\"font-medium\">{selectedPatient.name}</p>\n                <p className=\"text-sm text-muted-foreground\">{selectedPatient.phone}</p>\n              </div>\n            </div>\n          )}\n\n          {/* Appointment Details */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label className=\"text-muted-foreground\">Data</Label>\n              <p className=\"font-medium capitalize\">{formattedDate}</p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label className=\"text-muted-foreground\">Horário</Label>\n              <p className=\"font-medium\">{formData.start_time} - {formData.end_time}</p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label className=\"text-muted-foreground\">Tipo</Label>\n              <p className=\"font-medium capitalize\">\n                {formData.session_type === 'individual' ? 'Individual' : 'Grupo'}\n              </p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label className=\"text-muted-foreground\">Duração</Label>\n              <p className=\"font-medium\">\n                {formData.start_time && formData.end_time \n                  ? `${calculateDuration(formData.start_time, formData.end_time)} minutos`\n                  : '-'\n                }\n              </p>\n            </div>\n          </div>\n\n          {/* Notes */}\n          {formData.notes && (\n            <div className=\"space-y-2\">\n              <Label className=\"text-muted-foreground\">Observações</Label>\n              <div className=\"p-3 bg-muted rounded-lg\">\n                <p className=\"text-sm whitespace-pre-wrap\">{formData.notes}</p>\n              </div>\n            </div>\n          )}\n\n          {/* Price Info */}\n          {selectedPatient?.session_price && (\n            <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-green-800\">Valor da sessão:</span>\n                <span className=\"font-semibold text-green-900\">\n                  R$ {selectedPatient.session_price.toFixed(2)}\n                </span>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Utility function\nfunction calculateDuration(startTime: string, endTime: string): number {\n  const start = new Date(`2000-01-01T${startTime}:00`);\n  const end = new Date(`2000-01-01T${endTime}:00`);\n  return Math.round((end.getTime() - start.getTime()) / (1000 * 60));\n}"