import React, { useState, useMemo } from 'react';\nimport { ChevronLeft, ChevronRight, Calendar, Clock, User, Plus, Filter } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { useAgenda } from '@/hooks/useAgenda';\nimport { formatDate, addDays } from '@/utils/agendaUtils';\nimport { cn } from '@/lib/utils';\nimport type { Appointment } from '@/types/agenda';\n\ninterface MobileAgendaProps {\n  onTimeSlotClick?: (date: string, time: string) => void;\n  onAppointmentClick?: (appointmentId: string) => void;\n  onFiltersClick?: () => void;\n  hasActiveFilters?: boolean;\n  className?: string;\n}\n\nexport function MobileAgenda({\n  onTimeSlotClick,\n  onAppointmentClick,\n  onFiltersClick,\n  hasActiveFilters,\n  className\n}: MobileAgendaProps) {\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  \n  const {\n    weeklyData,\n    isLoading,\n    goToPreviousWeek,\n    goToNextWeek,\n    goToToday\n  } = useAgenda();\n\n  // Get appointments for selected date\n  const dayAppointments = useMemo(() => {\n    if (!weeklyData?.appointments) return [];\n    \n    const dateString = formatDate(selectedDate);\n    return weeklyData.appointments\n      .filter(apt => apt.date === dateString)\n      .sort((a, b) => a.start_time.localeCompare(b.start_time));\n  }, [weeklyData?.appointments, selectedDate]);\n\n  // Generate week days for navigation\n  const weekDays = useMemo(() => {\n    const startOfWeek = new Date(selectedDate);\n    const day = startOfWeek.getDay();\n    const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1); // Monday as first day\n    startOfWeek.setDate(diff);\n    \n    const days = [];\n    for (let i = 0; i < 7; i++) {\n      const date = addDays(startOfWeek, i);\n      days.push({\n        date,\n        dateString: formatDate(date),\n        dayName: date.toLocaleDateString('pt-BR', { weekday: 'short' }),\n        dayNumber: date.getDate(),\n        isToday: formatDate(date) === formatDate(new Date()),\n        isSelected: formatDate(date) === formatDate(selectedDate),\n        appointmentCount: weeklyData?.appointments?.filter(apt => apt.date === formatDate(date)).length || 0\n      });\n    }\n    return days;\n  }, [selectedDate, weeklyData?.appointments]);\n\n  const handleDateSelect = (date: Date) => {\n    setSelectedDate(date);\n  };\n\n  const handlePreviousDay = () => {\n    setSelectedDate(prev => addDays(prev, -1));\n  };\n\n  const handleNextDay = () => {\n    setSelectedDate(prev => addDays(prev, 1));\n  };\n\n  const selectedDateFormatted = selectedDate.toLocaleDateString('pt-BR', {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long'\n  });\n\n  return (\n    <div className={cn(\"flex flex-col h-full\", className)}>\n      {/* Header */}\n      <Card className=\"mb-4\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              Agenda Mobile\n            </CardTitle>\n            \n            <div className=\"flex items-center gap-1\">\n              {onFiltersClick && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={onFiltersClick}\n                  className=\"relative\"\n                >\n                  <Filter className=\"h-4 w-4\" />\n                  {hasActiveFilters && (\n                    <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-primary rounded-full\" />\n                  )}\n                </Button>\n              )}\n              \n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToToday}\n              >\n                Hoje\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-3\">\n          {/* Week Navigation */}\n          <div className=\"flex items-center justify-between\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={goToPreviousWeek}\n              disabled={isLoading}\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            \n            <div className=\"text-sm font-medium text-center\">\n              {weekDays[0]?.date.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' })}\n            </div>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={goToNextWeek}\n              disabled={isLoading}\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {/* Week Days */}\n          <div className=\"grid grid-cols-7 gap-1\">\n            {weekDays.map((day) => (\n              <Button\n                key={day.dateString}\n                variant={day.isSelected ? \"default\" : day.isToday ? \"secondary\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => handleDateSelect(day.date)}\n                className=\"flex flex-col h-12 p-1 relative\"\n              >\n                <span className=\"text-xs\">{day.dayName}</span>\n                <span className=\"text-sm font-semibold\">{day.dayNumber}</span>\n                {day.appointmentCount > 0 && (\n                  <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs\">\n                    {day.appointmentCount}\n                  </div>\n                )}\n              </Button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Selected Date Header */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handlePreviousDay}\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          \n          <h2 className=\"text-lg font-semibold capitalize\">\n            {selectedDateFormatted}\n          </h2>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleNextDay}\n          >\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        {onTimeSlotClick && (\n          <Button\n            size=\"sm\"\n            onClick={() => onTimeSlotClick(formatDate(selectedDate), '09:00')}\n            className=\"gap-1\"\n          >\n            <Plus className=\"h-3 w-3\" />\n            Novo\n          </Button>\n        )}\n      </div>\n\n      {/* Appointments List */}\n      <div className=\"flex-1\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"text-center space-y-2\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n              <p className=\"text-sm text-muted-foreground\">Carregando agendamentos...</p>\n            </div>\n          </div>\n        ) : dayAppointments.length > 0 ? (\n          <ScrollArea className=\"h-full\">\n            <div className=\"space-y-3\">\n              {dayAppointments.map((appointment) => (\n                <MobileAppointmentCard\n                  key={appointment.id}\n                  appointment={appointment}\n                  onClick={() => onAppointmentClick?.(appointment.id)}\n                />\n              ))}\n            </div>\n          </ScrollArea>\n        ) : (\n          <EmptyDayView\n            date={selectedDate}\n            onAddAppointment={onTimeSlotClick ? () => onTimeSlotClick(formatDate(selectedDate), '09:00') : undefined}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Mobile appointment card component\ninterface MobileAppointmentCardProps {\n  appointment: Appointment;\n  onClick: () => void;\n}\n\nfunction MobileAppointmentCard({ appointment, onClick }: MobileAppointmentCardProps) {\n  return (\n    <Card className=\"cursor-pointer hover:shadow-md transition-shadow\" onClick={onClick}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"font-medium\">\n                {appointment.start_time} - {appointment.end_time}\n              </span>\n              <Badge variant={getStatusVariant(appointment.status)} className=\"text-xs\">\n                {getStatusLabel(appointment.status)}\n              </Badge>\n            </div>\n            \n            <div className=\"flex items-center gap-2 mb-2\">\n              <User className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm\">\n                {appointment.patient?.name || 'Paciente n√£o encontrado'}\n              </span>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Badge \n                variant={appointment.payment_status === 'paid' ? 'default' : 'destructive'}\n                className=\"text-xs\"\n              >\n                {appointment.payment_status === 'paid' ? 'Pago' : 'Pendente'}\n              </Badge>\n              \n              <Badge variant=\"outline\" className=\"text-xs\">\n                {appointment.session_type === 'individual' ? 'Individual' : 'Grupo'}\n              </Badge>\n            </div>\n            \n            {appointment.notes && (\n              <p className=\"text-xs text-muted-foreground mt-2 line-clamp-2\">\n                {appointment.notes}\n              </p>\n            )}\n          </div>\n          \n          <ChevronRight className=\"h-4 w-4 text-muted-foreground ml-2\" />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Empty day view component\ninterface EmptyDayViewProps {\n  date: Date;\n  onAddAppointment?: () => void;\n}\n\nfunction EmptyDayView({ date, onAddAppointment }: EmptyDayViewProps) {\n  const isToday = formatDate(date) === formatDate(new Date());\n  const isPast = date < new Date();\n  \n  return (\n    <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n      <Calendar className=\"h-16 w-16 text-muted-foreground mb-4 opacity-50\" />\n      \n      <h3 className=\"text-lg font-medium mb-2\">\n        {isPast ? 'Nenhum agendamento registrado' : 'Nenhum agendamento'}\n      </h3>\n      \n      <p className=\"text-muted-foreground mb-6 max-w-sm\">\n        {isPast \n          ? 'N√£o h√° registros de agendamentos para este dia.'\n          : isToday \n            ? 'Voc√™ n√£o tem agendamentos para hoje.'\n            : 'N√£o h√° agendamentos marcados para este dia.'\n        }\n      </p>\n      \n      {onAddAppointment && !isPast && (\n        <Button onClick={onAddAppointment} className=\"gap-2\">\n          <Plus className=\"h-4 w-4\" />\n          Agendar Consulta\n        </Button>\n      )}\n    </div>\n  );\n}\n\n// Utility functions\nfunction getStatusLabel(status: string): string {\n  const labels = {\n    scheduled: 'Agendado',\n    completed: 'Conclu√≠do',\n    cancelled: 'Cancelado',\n    no_show: 'Faltou'\n  };\n  return labels[status as keyof typeof labels] || status;\n}\n\nfunction getStatusVariant(status: string): 'default' | 'secondary' | 'destructive' | 'outline' {\n  const variants = {\n    scheduled: 'default' as const,\n    completed: 'secondary' as const,\n    cancelled: 'destructive' as const,\n    no_show: 'outline' as const\n  };\n  return variants[status as keyof typeof variants] || 'outline';\n}"