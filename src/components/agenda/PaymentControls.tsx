import React, { useState } from 'react';\nimport { DollarSign, CreditCard, Banknote, Receipt, History, AlertCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Separator } from '@/components/ui/separator';\nimport { useUpdatePaymentStatus } from '@/hooks/useAppointments';\nimport { usePatientPayments, useCreatePayment } from '@/hooks/usePayments';\nimport { cn } from '@/lib/utils';\nimport type { Appointment } from '@/types/agenda';\n\ninterface PaymentControlsProps {\n  appointment: Appointment;\n  patient: any;\n}\n\nexport function PaymentControls({ appointment, patient }: PaymentControlsProps) {\n  const [paymentType, setPaymentType] = useState<'session' | 'package'>('session');\n  const [paymentMethod, setPaymentMethod] = useState<'cash' | 'card' | 'pix' | 'transfer'>('cash');\n  const [amount, setAmount] = useState(patient.session_price?.toString() || '0');\n  const [notes, setNotes] = useState('');\n  const [showPaymentForm, setShowPaymentForm] = useState(false);\n\n  const updatePaymentStatusMutation = useUpdatePaymentStatus();\n  const createPaymentMutation = useCreatePayment();\n  const { data: paymentHistory } = usePatientPayments(appointment.patient_id);\n\n  const handleMarkAsPaid = async () => {\n    try {\n      await updatePaymentStatusMutation.mutateAsync({\n        appointmentId: appointment.id,\n        paymentStatus: 'paid'\n      });\n    } catch (error) {\n      console.error('Failed to update payment status:', error);\n    }\n  };\n\n  const handleMarkAsPending = async () => {\n    try {\n      await updatePaymentStatusMutation.mutateAsync({\n        appointmentId: appointment.id,\n        paymentStatus: 'pending'\n      });\n    } catch (error) {\n      console.error('Failed to update payment status:', error);\n    }\n  };\n\n  const handleCreatePayment = async () => {\n    try {\n      await createPaymentMutation.mutateAsync({\n        appointment_id: appointment.id,\n        patient_id: appointment.patient_id,\n        amount: parseFloat(amount),\n        payment_method: paymentMethod,\n        payment_type: paymentType,\n        notes\n      });\n      \n      setShowPaymentForm(false);\n      setNotes('');\n    } catch (error) {\n      console.error('Failed to create payment:', error);\n    }\n  };\n\n  const sessionPrice = patient.session_price || 0;\n  const packagePrice = patient.package_price || 0;\n  const remainingSessions = patient.remaining_sessions || 0;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Payment Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <DollarSign className=\"h-5 w-5\" />\n            Status do Pagamento\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <Badge \n                variant={appointment.payment_status === 'paid' ? 'default' : 'destructive'}\n                className=\"text-sm\"\n              >\n                {appointment.payment_status === 'paid' ? 'Pago' : 'Pendente'}\n              </Badge>\n              <span className=\"text-lg font-semibold\">\n                R$ {sessionPrice.toFixed(2)}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"flex flex-wrap gap-2\">\n            {appointment.payment_status === 'pending' && (\n              <>\n                <Button\n                  onClick={handleMarkAsPaid}\n                  disabled={updatePaymentStatusMutation.isPending}\n                  className=\"flex items-center gap-2\"\n                >\n                  <CreditCard className=\"h-4 w-4\" />\n                  Marcar como Pago\n                </Button>\n                \n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowPaymentForm(true)}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Receipt className=\"h-4 w-4\" />\n                  Registrar Pagamento\n                </Button>\n              </>\n            )}\n            \n            {appointment.payment_status === 'paid' && (\n              <Button\n                variant=\"outline\"\n                onClick={handleMarkAsPending}\n                disabled={updatePaymentStatusMutation.isPending}\n                className=\"flex items-center gap-2\"\n              >\n                <AlertCircle className=\"h-4 w-4\" />\n                Marcar como Pendente\n              </Button>\n            )}\n          </div>\n\n          {updatePaymentStatusMutation.isPending && (\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n              Atualizando status do pagamento...\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Package Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Receipt className=\"h-5 w-5\" />\n            Informações do Pacote\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center p-4 bg-muted rounded-lg\">\n              <p className=\"text-2xl font-bold text-primary\">{remainingSessions}</p>\n              <p className=\"text-sm text-muted-foreground\">Sessões Restantes</p>\n            </div>\n            \n            <div className=\"text-center p-4 bg-muted rounded-lg\">\n              <p className=\"text-2xl font-bold text-green-600\">R$ {sessionPrice.toFixed(2)}</p>\n              <p className=\"text-sm text-muted-foreground\">Valor por Sessão</p>\n            </div>\n            \n            <div className=\"text-center p-4 bg-muted rounded-lg\">\n              <p className=\"text-2xl font-bold text-blue-600\">R$ {packagePrice.toFixed(2)}</p>\n              <p className=\"text-sm text-muted-foreground\">Valor do Pacote</p>\n            </div>\n          </div>\n\n          {remainingSessions <= 3 && remainingSessions > 0 && (\n            <div className=\"flex items-center gap-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n              <AlertCircle className=\"h-5 w-5 text-yellow-600\" />\n              <span className=\"text-sm text-yellow-800\">\n                Atenção: Restam apenas {remainingSessions} sessões no pacote do paciente.\n              </span>\n            </div>\n          )}\n\n          {remainingSessions === 0 && (\n            <div className=\"flex items-center gap-2 p-3 bg-red-50 border border-red-200 rounded-lg\">\n              <AlertCircle className=\"h-5 w-5 text-red-600\" />\n              <span className=\"text-sm text-red-800\">\n                Pacote esgotado. É necessário renovar o pacote ou pagar por sessão avulsa.\n              </span>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Payment Form */}\n      {showPaymentForm && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CreditCard className=\"h-5 w-5\" />\n              Registrar Pagamento\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"payment-type\">Tipo de Pagamento</Label>\n                <Select value={paymentType} onValueChange={(value: 'session' | 'package') => {\n                  setPaymentType(value);\n                  setAmount(value === 'session' ? sessionPrice.toString() : packagePrice.toString());\n                }}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"session\">Sessão Avulsa</SelectItem>\n                    <SelectItem value=\"package\">Pacote de Sessões</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"payment-method\">Método de Pagamento</Label>\n                <Select value={paymentMethod} onValueChange={(value: any) => setPaymentMethod(value)}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"cash\">Dinheiro</SelectItem>\n                    <SelectItem value=\"card\">Cartão</SelectItem>\n                    <SelectItem value=\"pix\">PIX</SelectItem>\n                    <SelectItem value=\"transfer\">Transferência</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"amount\">Valor</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={amount}\n                  onChange={(e) => setAmount(e.target.value)}\n                  placeholder=\"0.00\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"payment-date\">Data do Pagamento</Label>\n                <Input\n                  id=\"payment-date\"\n                  type=\"date\"\n                  defaultValue={new Date().toISOString().split('T')[0]}\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"payment-notes\">Observações</Label>\n              <Textarea\n                id=\"payment-notes\"\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n                placeholder=\"Observações sobre o pagamento...\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowPaymentForm(false)}\n              >\n                Cancelar\n              </Button>\n              \n              <Button\n                onClick={handleCreatePayment}\n                disabled={createPaymentMutation.isPending || !amount}\n              >\n                {createPaymentMutation.isPending ? 'Registrando...' : 'Registrar Pagamento'}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Payment History */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <History className=\"h-5 w-5\" />\n            Histórico de Pagamentos\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <PaymentHistory payments={paymentHistory} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Payment history component\ninterface PaymentHistoryProps {\n  payments?: any[];\n}\n\nfunction PaymentHistory({ payments = [] }: PaymentHistoryProps) {\n  if (payments.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-muted-foreground\">\n        <Receipt className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n        <p>Nenhum pagamento registrado ainda.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {payments.map((payment, index) => (\n        <div key={payment.id || index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n          <div className=\"flex items-center gap-3\">\n            <div className={cn(\n              \"w-10 h-10 rounded-full flex items-center justify-center\",\n              getPaymentMethodColor(payment.payment_method)\n            )}>\n              {getPaymentMethodIcon(payment.payment_method)}\n            </div>\n            \n            <div>\n              <p className=\"font-medium\">\n                R$ {payment.amount?.toFixed(2) || '0.00'}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">\n                {payment.payment_method && getPaymentMethodLabel(payment.payment_method)} • \n                {payment.created_at && new Date(payment.created_at).toLocaleDateString('pt-BR')}\n              </p>\n              {payment.notes && (\n                <p className=\"text-xs text-muted-foreground mt-1\">{payment.notes}</p>\n              )}\n            </div>\n          </div>\n          \n          <Badge variant={payment.payment_type === 'package' ? 'default' : 'secondary'}>\n            {payment.payment_type === 'package' ? 'Pacote' : 'Sessão'}\n          </Badge>\n        </div>\n      ))}\n    </div>\n  );\n}\n\n// Utility functions\nfunction getPaymentMethodLabel(method: string): string {\n  const labels = {\n    cash: 'Dinheiro',\n    card: 'Cartão',\n    pix: 'PIX',\n    transfer: 'Transferência'\n  };\n  return labels[method as keyof typeof labels] || method;\n}\n\nfunction getPaymentMethodIcon(method: string) {\n  const icons = {\n    cash: <Banknote className=\"h-5 w-5\" />,\n    card: <CreditCard className=\"h-5 w-5\" />,\n    pix: <DollarSign className=\"h-5 w-5\" />,\n    transfer: <Receipt className=\"h-5 w-5\" />\n  };\n  return icons[method as keyof typeof icons] || <DollarSign className=\"h-5 w-5\" />;\n}\n\nfunction getPaymentMethodColor(method: string): string {\n  const colors = {\n    cash: 'bg-green-100 text-green-600',\n    card: 'bg-blue-100 text-blue-600',\n    pix: 'bg-purple-100 text-purple-600',\n    transfer: 'bg-orange-100 text-orange-600'\n  };\n  return colors[method as keyof typeof colors] || 'bg-gray-100 text-gray-600';\n}"