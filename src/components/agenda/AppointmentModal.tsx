import React, { useState, useEffect } from 'react';
import { X, User, Calendar, Clock, FileText, DollarSign, Phone, Mail } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { useAppointment } from '@/hooks/useAppointments';
import { usePatient } from '@/hooks/usePatients';
import { cn } from '@/lib/utils';
import type { Appointment } from '@/types/agenda';

// Import sub-components
import { SessionControls } from './SessionControls';
import { PaymentControls } from './PaymentControls';
import { AppointmentHistory } from './AppointmentHistory';

interface AppointmentModalProps {
  appointmentId: string | null;
  isOpen: boolean;
  onClose: () => void;
  onEdit?: (appointmentId: string) => void;
  onStartEvolution?: (appointmentId: string, patientId: string) => void;
}\n\nexport function AppointmentModal({\n  appointmentId,\n  isOpen,\n  onClose,\n  onEdit,\n  onStartEvolution\n}: AppointmentModalProps) {\n  const [activeTab, setActiveTab] = useState('details');\n  \n  const { data: appointment, isLoading: appointmentLoading } = useAppointment(appointmentId);\n  const { data: patient, isLoading: patientLoading } = usePatient(appointment?.patient_id);\n\n  const isLoading = appointmentLoading || patientLoading;\n\n  // Reset tab when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setActiveTab('details');\n    }\n  }, [isOpen]);\n\n  // Handle keyboard shortcuts\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      switch (event.key) {\n        case 'Escape':\n          onClose();\n          break;\n        case '1':\n          if (event.ctrlKey || event.metaKey) {\n            event.preventDefault();\n            setActiveTab('details');\n          }\n          break;\n        case '2':\n          if (event.ctrlKey || event.metaKey) {\n            event.preventDefault();\n            setActiveTab('session');\n          }\n          break;\n        case '3':\n          if (event.ctrlKey || event.metaKey) {\n            event.preventDefault();\n            setActiveTab('payment');\n          }\n          break;\n        case 'e':\n          if ((event.ctrlKey || event.metaKey) && onEdit && appointment) {\n            event.preventDefault();\n            onEdit(appointment.id);\n          }\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, onClose, onEdit, appointment]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <Card className=\"w-full max-w-4xl max-h-[90vh] overflow-hidden\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n          <div className=\"flex items-center gap-3\">\n            <Calendar className=\"h-6 w-6 text-primary\" />\n            <CardTitle className=\"text-xl font-semibold\">\n              {isLoading ? 'Carregando...' : 'Detalhes do Agendamento'}\n            </CardTitle>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {appointment && onEdit && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onEdit(appointment.id)}\n              >\n                Editar\n              </Button>\n            )}\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              className=\"h-8 w-8 p-0\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"p-0\">\n          {isLoading ? (\n            <LoadingState />\n          ) : appointment && patient ? (\n            <AppointmentContent\n              appointment={appointment}\n              patient={patient}\n              activeTab={activeTab}\n              onTabChange={setActiveTab}\n              onStartEvolution={onStartEvolution}\n            />\n          ) : (\n            <ErrorState onClose={onClose} />\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Loading state component\nfunction LoadingState() {\n  return (\n    <div className=\"flex items-center justify-center py-12\">\n      <div className=\"text-center space-y-4\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n        <p className=\"text-muted-foreground\">Carregando informações do agendamento...</p>\n      </div>\n    </div>\n  );\n}\n\n// Error state component\ninterface ErrorStateProps {\n  onClose: () => void;\n}\n\nfunction ErrorState({ onClose }: ErrorStateProps) {\n  return (\n    <div className=\"flex items-center justify-center py-12\">\n      <div className=\"text-center space-y-4\">\n        <div className=\"text-red-500\">\n          <X className=\"h-12 w-12 mx-auto\" />\n        </div>\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-medium\">Agendamento não encontrado</h3>\n          <p className=\"text-muted-foreground\">\n            O agendamento solicitado não foi encontrado ou você não tem permissão para visualizá-lo.\n          </p>\n        </div>\n        <Button onClick={onClose}>Fechar</Button>\n      </div>\n    </div>\n  );\n}\n\n// Main content component\ninterface AppointmentContentProps {\n  appointment: Appointment;\n  patient: any; // Patient type from usePatient\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n  onStartEvolution?: (appointmentId: string, patientId: string) => void;\n}\n\nfunction AppointmentContent({\n  appointment,\n  patient,\n  activeTab,\n  onTabChange,\n  onStartEvolution\n}: AppointmentContentProps) {\n  return (\n    <div className=\"space-y-6\">\n      {/* Patient Header */}\n      <PatientHeader appointment={appointment} patient={patient} />\n      \n      {/* Appointment Summary */}\n      <AppointmentSummary appointment={appointment} />\n      \n      <Separator />\n      \n      {/* Tabs */}\n      <Tabs value={activeTab} onValueChange={onTabChange} className=\"px-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"details\">Detalhes</TabsTrigger>\n          <TabsTrigger value=\"session\">Sessão</TabsTrigger>\n          <TabsTrigger value=\"payment\">Pagamento</TabsTrigger>\n          <TabsTrigger value=\"history\">Histórico</TabsTrigger>\n        </TabsList>\n        \n        <div className=\"mt-6 pb-6\">\n          <TabsContent value=\"details\" className=\"space-y-4\">\n            <AppointmentDetails appointment={appointment} patient={patient} />\n          </TabsContent>\n          \n          <TabsContent value=\"session\" className=\"space-y-4\">\n            <SessionControls \n              appointment={appointment}\n              onStartEvolution={onStartEvolution}\n            />\n          </TabsContent>\n          \n          <TabsContent value=\"payment\" className=\"space-y-4\">\n            <PaymentControls \n              appointment={appointment}\n              patient={patient}\n            />\n          </TabsContent>\n          \n          <TabsContent value=\"history\" className=\"space-y-4\">\n            <AppointmentHistory \n              patientId={appointment.patient_id}\n              currentAppointmentId={appointment.id}\n            />\n          </TabsContent>\n        </div>\n      </Tabs>\n    </div>\n  );\n}\n\n// Patient header component\ninterface PatientHeaderProps {\n  appointment: Appointment;\n  patient: any;\n}\n\nfunction PatientHeader({ appointment, patient }: PatientHeaderProps) {\n  return (\n    <div className=\"px-6 pt-2\">\n      <div className=\"flex items-center gap-4\">\n        <Avatar className=\"h-16 w-16\">\n          <AvatarImage src={patient.avatar_url} alt={patient.name} />\n          <AvatarFallback className=\"text-lg\">\n            {patient.name?.split(' ').map((n: string) => n[0]).join('').toUpperCase() || 'P'}\n          </AvatarFallback>\n        </Avatar>\n        \n        <div className=\"flex-1 space-y-2\">\n          <div className=\"flex items-center gap-3\">\n            <h2 className=\"text-2xl font-bold\">{patient.name}</h2>\n            <Badge variant={appointment.status === 'scheduled' ? 'default' : 'secondary'}>\n              {getStatusLabel(appointment.status)}\n            </Badge>\n            <Badge variant={appointment.payment_status === 'paid' ? 'default' : 'destructive'}>\n              {appointment.payment_status === 'paid' ? 'Pago' : 'Pendente'}\n            </Badge>\n          </div>\n          \n          <div className=\"flex items-center gap-6 text-sm text-muted-foreground\">\n            {patient.phone && (\n              <div className=\"flex items-center gap-1\">\n                <Phone className=\"h-4 w-4\" />\n                <span>{patient.phone}</span>\n              </div>\n            )}\n            {patient.email && (\n              <div className=\"flex items-center gap-1\">\n                <Mail className=\"h-4 w-4\" />\n                <span>{patient.email}</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Appointment summary component\ninterface AppointmentSummaryProps {\n  appointment: Appointment;\n}\n\nfunction AppointmentSummary({ appointment }: AppointmentSummaryProps) {\n  const appointmentDate = new Date(appointment.date);\n  const formattedDate = appointmentDate.toLocaleDateString('pt-BR', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  return (\n    <div className=\"px-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"p-4\">\n          <div className=\"flex items-center gap-3\">\n            <Calendar className=\"h-5 w-5 text-primary\" />\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Data</p>\n              <p className=\"font-medium capitalize\">{formattedDate}</p>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"p-4\">\n          <div className=\"flex items-center gap-3\">\n            <Clock className=\"h-5 w-5 text-primary\" />\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Horário</p>\n              <p className=\"font-medium\">{appointment.start_time} - {appointment.end_time}</p>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"p-4\">\n          <div className=\"flex items-center gap-3\">\n            <User className=\"h-5 w-5 text-primary\" />\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Tipo</p>\n              <p className=\"font-medium capitalize\">\n                {appointment.session_type === 'individual' ? 'Individual' : 'Grupo'}\n              </p>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\n// Appointment details component\ninterface AppointmentDetailsProps {\n  appointment: Appointment;\n  patient: any;\n}\n\nfunction AppointmentDetails({ appointment, patient }: AppointmentDetailsProps) {\n  return (\n    <div className=\"space-y-6\">\n      {/* Basic Information */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n          <FileText className=\"h-5 w-5\" />\n          Informações Básicas\n        </h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-muted-foreground\">ID do Agendamento</label>\n            <p className=\"font-mono text-sm bg-muted p-2 rounded\">{appointment.id}</p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-muted-foreground\">Criado em</label>\n            <p className=\"text-sm\">\n              {new Date(appointment.created_at).toLocaleString('pt-BR')}\n            </p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-muted-foreground\">Última atualização</label>\n            <p className=\"text-sm\">\n              {new Date(appointment.updated_at).toLocaleString('pt-BR')}\n            </p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-muted-foreground\">Duração</label>\n            <p className=\"text-sm\">\n              {calculateDuration(appointment.start_time, appointment.end_time)} minutos\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      {/* Notes */}\n      {appointment.notes && (\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium text-muted-foreground\">Observações</label>\n          <div className=\"bg-muted p-4 rounded-lg\">\n            <p className=\"text-sm whitespace-pre-wrap\">{appointment.notes}</p>\n          </div>\n        </div>\n      )}\n      \n      {/* Patient Information */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n          <User className=\"h-5 w-5\" />\n          Informações do Paciente\n        </h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-muted-foreground\">Nome completo</label>\n            <p className=\"text-sm\">{patient.name}</p>\n          </div>\n          \n          {patient.birth_date && (\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-muted-foreground\">Data de nascimento</label>\n              <p className=\"text-sm\">\n                {new Date(patient.birth_date).toLocaleDateString('pt-BR')}\n              </p>\n            </div>\n          )}\n          \n          {patient.cpf && (\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-muted-foreground\">CPF</label>\n              <p className=\"text-sm font-mono\">{patient.cpf}</p>\n            </div>\n          )}\n          \n          {patient.address && (\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-muted-foreground\">Endereço</label>\n              <p className=\"text-sm\">{patient.address}</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Utility functions\nfunction getStatusLabel(status: string): string {\n  const labels = {\n    scheduled: 'Agendado',\n    completed: 'Concluído',\n    cancelled: 'Cancelado',\n    no_show: 'Faltou'\n  };\n  return labels[status as keyof typeof labels] || status;\n}\n\nfunction calculateDuration(startTime: string, endTime: string): number {\n  const start = new Date(`2000-01-01T${startTime}:00`);\n  const end = new Date(`2000-01-01T${endTime}:00`);\n  return Math.round((end.getTime() - start.getTime()) / (1000 * 60));\n}"