import React, { useState } from 'react';\nimport { Calendar, Clock, User, Filter, ChevronDown, ChevronUp } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { usePatientAppointments } from '@/hooks/useAppointments';\nimport { cn } from '@/lib/utils';\nimport type { Appointment } from '@/types/agenda';\n\ninterface AppointmentHistoryProps {\n  patientId: string;\n  currentAppointmentId: string;\n}\n\nexport function AppointmentHistory({ patientId, currentAppointmentId }: AppointmentHistoryProps) {\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [dateRange, setDateRange] = useState<'all' | 'last30' | 'last90' | 'last180'>('all');\n  const [expandedAppointment, setExpandedAppointment] = useState<string | null>(null);\n\n  const { data: appointments = [], isLoading } = usePatientAppointments(patientId, {\n    status: statusFilter !== 'all' ? statusFilter : undefined,\n    date_range: dateRange !== 'all' ? dateRange : undefined\n  });\n\n  // Filter out current appointment and sort by date (newest first)\n  const filteredAppointments = appointments\n    .filter(apt => apt.id !== currentAppointmentId)\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n\n  const handleToggleExpand = (appointmentId: string) => {\n    setExpandedAppointment(expandedAppointment === appointmentId ? null : appointmentId);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"text-muted-foreground\">Carregando histórico...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filtros\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"status-filter\">Status</Label>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos</SelectItem>\n                  <SelectItem value=\"scheduled\">Agendados</SelectItem>\n                  <SelectItem value=\"completed\">Concluídos</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelados</SelectItem>\n                  <SelectItem value=\"no_show\">Faltas</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"date-range\">Período</Label>\n              <Select value={dateRange} onValueChange={(value: any) => setDateRange(value)}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos</SelectItem>\n                  <SelectItem value=\"last30\">Últimos 30 dias</SelectItem>\n                  <SelectItem value=\"last90\">Últimos 90 dias</SelectItem>\n                  <SelectItem value=\"last180\">Últimos 180 dias</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Statistics */}\n      <AppointmentStats appointments={filteredAppointments} />\n\n      {/* Appointment List */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              Histórico de Agendamentos\n            </span>\n            <Badge variant=\"secondary\">\n              {filteredAppointments.length} agendamentos\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {filteredAppointments.length === 0 ? (\n            <EmptyState statusFilter={statusFilter} dateRange={dateRange} />\n          ) : (\n            <div className=\"space-y-3\">\n              {filteredAppointments.map((appointment) => (\n                <AppointmentHistoryItem\n                  key={appointment.id}\n                  appointment={appointment}\n                  isExpanded={expandedAppointment === appointment.id}\n                  onToggleExpand={() => handleToggleExpand(appointment.id)}\n                />\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Statistics component\ninterface AppointmentStatsProps {\n  appointments: Appointment[];\n}\n\nfunction AppointmentStats({ appointments }: AppointmentStatsProps) {\n  const stats = {\n    total: appointments.length,\n    completed: appointments.filter(apt => apt.status === 'completed').length,\n    cancelled: appointments.filter(apt => apt.status === 'cancelled').length,\n    noShow: appointments.filter(apt => apt.status === 'no_show').length,\n    paid: appointments.filter(apt => apt.payment_status === 'paid').length\n  };\n\n  const completionRate = stats.total > 0 ? (stats.completed / stats.total * 100).toFixed(1) : '0';\n  const paymentRate = stats.total > 0 ? (stats.paid / stats.total * 100).toFixed(1) : '0';\n\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n      <Card className=\"p-4\">\n        <div className=\"text-center\">\n          <p className=\"text-2xl font-bold text-primary\">{stats.total}</p>\n          <p className=\"text-sm text-muted-foreground\">Total</p>\n        </div>\n      </Card>\n      \n      <Card className=\"p-4\">\n        <div className=\"text-center\">\n          <p className=\"text-2xl font-bold text-green-600\">{stats.completed}</p>\n          <p className=\"text-sm text-muted-foreground\">Concluídos</p>\n        </div>\n      </Card>\n      \n      <Card className=\"p-4\">\n        <div className=\"text-center\">\n          <p className=\"text-2xl font-bold text-red-600\">{stats.cancelled}</p>\n          <p className=\"text-sm text-muted-foreground\">Cancelados</p>\n        </div>\n      </Card>\n      \n      <Card className=\"p-4\">\n        <div className=\"text-center\">\n          <p className=\"text-2xl font-bold text-orange-600\">{stats.noShow}</p>\n          <p className=\"text-sm text-muted-foreground\">Faltas</p>\n        </div>\n      </Card>\n      \n      <Card className=\"p-4\">\n        <div className=\"text-center\">\n          <p className=\"text-2xl font-bold text-blue-600\">{completionRate}%</p>\n          <p className=\"text-sm text-muted-foreground\">Taxa Conclusão</p>\n        </div>\n      </Card>\n    </div>\n  );\n}\n\n// Individual appointment history item\ninterface AppointmentHistoryItemProps {\n  appointment: Appointment;\n  isExpanded: boolean;\n  onToggleExpand: () => void;\n}\n\nfunction AppointmentHistoryItem({ appointment, isExpanded, onToggleExpand }: AppointmentHistoryItemProps) {\n  const appointmentDate = new Date(appointment.date);\n  const isRecent = (Date.now() - appointmentDate.getTime()) < (7 * 24 * 60 * 60 * 1000); // Last 7 days\n\n  return (\n    <Card className={cn(\n      \"transition-all duration-200\",\n      isRecent && \"ring-1 ring-primary/20\",\n      isExpanded && \"ring-2 ring-primary/30\"\n    )}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"text-center\">\n              <p className=\"text-lg font-semibold\">{appointmentDate.getDate()}</p>\n              <p className=\"text-xs text-muted-foreground uppercase\">\n                {appointmentDate.toLocaleDateString('pt-BR', { month: 'short' })}\n              </p>\n            </div>\n            \n            <div className=\"space-y-1\">\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"font-medium\">\n                  {appointment.start_time} - {appointment.end_time}\n                </span>\n                {isRecent && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    Recente\n                  </Badge>\n                )}\n              </div>\n              \n              <div className=\"flex items-center gap-2\">\n                <Badge variant={getStatusVariant(appointment.status)}>\n                  {getStatusLabel(appointment.status)}\n                </Badge>\n                <Badge variant={appointment.payment_status === 'paid' ? 'default' : 'destructive'}>\n                  {appointment.payment_status === 'paid' ? 'Pago' : 'Pendente'}\n                </Badge>\n              </div>\n            </div>\n          </div>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onToggleExpand}\n            className=\"flex items-center gap-1\"\n          >\n            {isExpanded ? (\n              <>\n                <ChevronUp className=\"h-4 w-4\" />\n                Menos\n              </>\n            ) : (\n              <>\n                <ChevronDown className=\"h-4 w-4\" />\n                Mais\n              </>\n            )}\n          </Button>\n        </div>\n        \n        {isExpanded && (\n          <div className=\"mt-4 pt-4 border-t space-y-3\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n              <div>\n                <p className=\"text-muted-foreground\">Tipo de Sessão</p>\n                <p className=\"font-medium capitalize\">\n                  {appointment.session_type === 'individual' ? 'Individual' : 'Grupo'}\n                </p>\n              </div>\n              \n              <div>\n                <p className=\"text-muted-foreground\">Data de Criação</p>\n                <p className=\"font-medium\">\n                  {new Date(appointment.created_at).toLocaleDateString('pt-BR')}\n                </p>\n              </div>\n              \n              <div>\n                <p className=\"text-muted-foreground\">Última Atualização</p>\n                <p className=\"font-medium\">\n                  {new Date(appointment.updated_at).toLocaleDateString('pt-BR')}\n                </p>\n              </div>\n              \n              <div>\n                <p className=\"text-muted-foreground\">ID do Agendamento</p>\n                <p className=\"font-mono text-xs\">{appointment.id}</p>\n              </div>\n            </div>\n            \n            {appointment.notes && (\n              <div>\n                <p className=\"text-muted-foreground text-sm mb-2\">Observações</p>\n                <div className=\"bg-muted p-3 rounded-lg\">\n                  <p className=\"text-sm whitespace-pre-wrap\">{appointment.notes}</p>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Empty state component\ninterface EmptyStateProps {\n  statusFilter: string;\n  dateRange: string;\n}\n\nfunction EmptyState({ statusFilter, dateRange }: EmptyStateProps) {\n  const hasFilters = statusFilter !== 'all' || dateRange !== 'all';\n  \n  return (\n    <div className=\"text-center py-12\">\n      <Calendar className=\"h-16 w-16 text-muted-foreground mx-auto mb-4 opacity-50\" />\n      <h3 className=\"text-lg font-medium mb-2\">\n        {hasFilters ? 'Nenhum agendamento encontrado' : 'Nenhum histórico disponível'}\n      </h3>\n      <p className=\"text-muted-foreground mb-4\">\n        {hasFilters \n          ? 'Tente ajustar os filtros para ver mais resultados.'\n          : 'Este paciente ainda não possui histórico de agendamentos anteriores.'\n        }\n      </p>\n      {hasFilters && (\n        <Button variant=\"outline\" onClick={() => {\n          // Reset filters - this would need to be passed as props\n        }}>\n          Limpar Filtros\n        </Button>\n      )}\n    </div>\n  );\n}\n\n// Utility functions\nfunction getStatusLabel(status: string): string {\n  const labels = {\n    scheduled: 'Agendado',\n    completed: 'Concluído',\n    cancelled: 'Cancelado',\n    no_show: 'Faltou'\n  };\n  return labels[status as keyof typeof labels] || status;\n}\n\nfunction getStatusVariant(status: string): 'default' | 'secondary' | 'destructive' | 'outline' {\n  const variants = {\n    scheduled: 'default' as const,\n    completed: 'secondary' as const,\n    cancelled: 'destructive' as const,\n    no_show: 'outline' as const\n  };\n  return variants[status as keyof typeof variants] || 'outline';\n}"